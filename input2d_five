USE_PRECOND =  TRUE
w = 0.675  // under relaxation factor for box relaxation scheme
C = 0.0 // C in C*u
D = 1.0 
IS_VEL_NULLSPACE = TRUE // set true if C == 0

un {
   function_0 = "cos(2*PI*X_0)"
   function_1 = "cos(2*PI*X_1)"
   //function_0 = "sin(2*PI*X_0)*cos(2*PI*X_1)"
   //function_1 = "-cos(2*PI*X_0)*sin(2*PI*X_1)"
}

us {
   function_0 = "-cos(2*PI*X_0)"
   function_1 = "-cos(2*PI*X_1)" // so that average of un + us is 0
   //function_0 = "sin(2*PI*X_0)*cos(2*PI*X_1)"
   //function_1 = "-cos(2*PI*X_0)*sin(2*PI*X_1)"
} 

p {
   function = "sin(2*PI*X_0)"
} // pressure has mean 0

f_un {
   //function_0 = "-0.5*cos(2*PI*X_0) - PI*cos(2*PI*X_0) - 2*PI*PI*cos(2*PI*X_0) + 0.0*cos(2*PI*X_0)"  
   //function_1 = "-0.5*cos(2*PI*X_1) - 2*PI*PI*cos(2*PI*X_1) + 0.0*cos(2*PI*X_1)"  
   function_0 = "-0.2*(2*PI*sin(2*PI*X_0)*cos(2*PI*X_0) + 8*PI*PI*sin(2*PI*X_0)*cos(2*PI*X_1))" // four-roll mill
   function_1 = "-0.2*(2*PI*sin(2*PI*X_1)*cos(2*PI*X_1) - 8*PI*PI*sin(2*PI*X_1)*cos(2*PI*X_0))"
   //function_0 = "(1-(0.25*tanh(1.0*(sqrt(X_0*X_0+X_1*X_1)-0.2))+0.75))*(2*PI*sin(2*PI*X_0)*cos(2*PI*X_0) + 8*PI*PI*sin(2*PI*X_0)*cos(2*PI*X_1))"
   //function_1 = "(1-(0.25*tanh(1.0*(sqrt(X_0*X_0+X_1*X_1)-0.2))+0.75))*(2*PI*sin(2*PI*X_1)*cos(2*PI*X_1) + 8*PI*PI*sin(2*PI*X_1)*cos(2*PI*X_0))"
}

f_us {
   //function_0 = "0.5*cos(2*PI*X_0) - PI*cos(2*PI*X_0) + 2*PI*PI*cos(2*PI*X_0) - 0.0*cos(2*PI*X_0)"
   //function_1 = "0.5*cos(2*PI*X_1) + 2*PI*PI*cos(2*PI*X_1) - 0.0*cos(2*PI*X_1)" 
   function_0 = "-0.8*(2*PI*sin(2*PI*X_0)*cos(2*PI*X_0) + 8*PI*PI*sin(2*PI*X_0)*cos(2*PI*X_1))" // four-roll mill
   function_1 = "-0.8*(2*PI*sin(2*PI*X_1)*cos(2*PI*X_1) - 8*PI*PI*sin(2*PI*X_1)*cos(2*PI*X_0))"
   //function_0 = "(0.25*tanh(1.0*(sqrt(X_0*X_0+X_1*X_1)-0.2))+0.75)*(2*PI*sin(2*PI*X_0)*cos(2*PI*X_0) + 8*PI*PI*sin(2*PI*X_0)*cos(2*PI*X_1))"
   //function_1 = "(0.25*tanh(1.0*(sqrt(X_0*X_0+X_1*X_1)-0.2))+0.75)*(2*PI*sin(2*PI*X_1)*cos(2*PI*X_1) + 8*PI*PI*sin(2*PI*X_1)*cos(2*PI*X_0))"
}

f_p {
   function = "0.0"
}

thn {
   function = "0.2"
   //function = "1-(0.25*tanh(10.0*(sqrt(X_0*X_0+X_1*X_1)-0.2))+0.75)"
   //function = "0.25*tanh(1.0*(sqrt(X_0*X_0+X_1*X_1)))+0.25"
}

KrylovSolver {

}

KrylovPrecondStrategy {

}

multigrid_max_levels = 4

KrylovPrecond {
   cycle_type = "F_CYCLE"
   num_pre_sweeps = 3
   num_post_sweeps = 3
   enable_logging = TRUE
}

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d_4roll_pc_uniThn_UniGrid"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 32

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = -0.5, -0.5      // lower end of computational domain.
   x_up               = 0.5, 0.5        // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridCartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = -0.5, -0.5      // lower end of computational domain.
   x_up               = 0.5, 0.5        // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridAlg {
}

GriddingAlgorithm {
   max_levels = 1                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
    // level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1, 3*N/4 - 2)]
    // level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )] // L-shaped refinement
    level_0 = [( N/4 , N/8 ),( 3*N/4 - 1 , 3*N/4 - 1 )] 
    // level_0 = [(N/4 + 5 , N/4 + 5),( N/4 + 10, N/4 + 10)] 
    // level_0 = [(1,1), (30,30)] 
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1 
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}

USE_PRECOND = TRUE

w = 0.75  // under relaxation factor for box relaxation scheme
C = 0.001 // C in C*u

un {
   function_0 = "cos(2*PI*X_0)"
   function_1 = "cos(2*PI*X_1)"
}

us {
   function_0 = "-cos(2*PI*X_0)"
   function_1 = "-cos(2*PI*X_1)" 
} // so that average of un + us is 0

p {
   function = "sin(2*PI*X_0)"
} // pressure has mean 0

f_un {
   c = C
   function_0 = "-0.5*cos(2*PI*X_0) - PI*cos(2*PI*X_0) - 2*PI*PI*cos(2*PI*X_0) + c*cos(2*PI*X_0)"  // C*u term
   function_1 = "-0.5*cos(2*PI*X_1) - 2*PI*PI*cos(2*PI*X_1)  + c*cos(2*PI*X_1)"  // C*u term
}

f_us {
   c = C
   function_0 = "0.5*cos(2*PI*X_0) - PI*cos(2*PI*X_0) + 2*PI*PI*cos(2*PI*X_0) - c*cos(2*PI*X_0)"  // C*u term
   function_1 = "0.5*cos(2*PI*X_1) + 2*PI*PI*cos(2*PI*X_1) - 0.001*cos(2*PI*X_1)"   // C*u term
}

f_p {
   function = "0.0"
}

thn {
   function = "0.5"
}

KrylovSolver {

}

KrylovPrecondStrategy {

}

multigrid_max_levels = 5

KrylovPrecond {
   cycle_type = "V_CYCLE"
   num_pre_sweeps = 2
   num_post_sweeps = 2
   enable_logging = TRUE
}

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d_multigrid1"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 128*2

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridCartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridAlg {
}

GriddingAlgorithm {
   max_levels = 2                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1, 3*N/4 - 2)]
    // level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )] // L-shaped refinement
    // level_0 = [( N/4 , N/8 ),( 3*N/4 - 1 , 3*N/4 - 1 )] 
    // level_0 = [(N/4 + 5 , N/4 + 5),( N/4 + 10, N/4 + 10)] 
    // level_0 = [(1,1), (30,30)] 
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}

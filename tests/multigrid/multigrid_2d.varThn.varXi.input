USING_VAR_XI = TRUE

USE_PRECOND = TRUE
w = 0.75
C = 1.0
D = -1.0
IS_VEL_NULLSPACE = FALSE

XI = 1.0
ETAN = 1.0
ETAS = 1.0
NU = 1.0

MAX_MULTIGRID_LEVELS = 2
PRECONDITIONER_COARSENING_OP = "CONSERVATIVE_COARSEN"

un {
   function_0 = "sin(2*PI*X_0)*cos(2*PI*X_1)"
   function_1 = "cos(2*PI*X_0)*sin(2*PI*X_1)"
}

us {
   function_0 = "-sin(2*PI*X_0)*cos(2*PI*X_1)"
   function_1 = "-cos(2*PI*X_0)*sin(2*PI*X_1)"
} // so that average of un + us is 0

p {
   function = "0.0"
} // pressure has mean 0

thn {
   function = "0.25*sin(2*PI*X_0)*sin(2*PI*X_1) + 0.5"
}

f_un {
   c = C
   d = D
   nu = NU
   etan = ETAN
   xi = XI
   etas = ETAS
   function_0 = "(1/(8*nu))*cos(2*PI*X_1)*sin(2*PI*X_0)*(4*c*nu-4*d*(8*etan*nu*PI^2+xi)+2*nu*(c-16*d*etan*PI^2)*sin(2*PI*X_0)*sin(2*PI*X_1)+d*xi*sin(2*PI*X_0)^2*sin(2*PI*X_1)^2)"
   function_1 = "(1/(8*nu))*cos(2*PI*X_0)*sin(2*PI*X_1)*(4*c*nu-4*d*(8*etan*nu*PI^2+xi)+2*nu*(c-16*d*etan*PI^2)*sin(2*PI*X_0)*sin(2*PI*X_1)+d*xi*sin(2*PI*X_0)^2*sin(2*PI*X_1)^2)"
}

f_us {
   c = C
   d = D
   nu = NU
   etan = ETAN
   xi = XI
   etas = ETAS
   function_0 = "(1/(8*nu))*cos(2*PI*X_1)*sin(2*PI*X_0)*(-4*c*nu+4*d*(8*etas*nu*PI^2+xi)+2*nu*(c-16*d*etas*PI^2)*sin(2*PI*X_0)*sin(2*PI*X_1)-d*xi*sin(2*PI*X_0)^2*sin(2*PI*X_1)^2)"
   function_1 = "(1/(8*nu))*cos(2*PI*X_0)*sin(2*PI*X_1)*(-4*c*nu+4*d*(8*etas*nu*PI^2+xi)+2*nu*(c-16*d*etas*PI^2)*sin(2*PI*X_0)*sin(2*PI*X_1)-d*xi*sin(2*PI*X_0)^2*sin(2*PI*X_1)^2)"
}

f_p {
   function = "PI*sin(4*PI*X_0)*sin(4*PI*X_1)"
}

xi_fcn {
   xi = XI
   nu = NU
   function = "(0.25*sin(2*PI*X_0)*sin(2*PI*X_1) + 0.5) * (1.0 - (0.25*sin(2*PI*X_0)*sin(2*PI*X_1) + 0.5)) * xi / nu"
}

KrylovSolver {

}

KrylovPrecondStrategy {

}

KrylovPrecond {
   cycle_type = "V_CYCLE"
   num_pre_sweeps = 3
   num_post_sweeps = 3
   enable_logging = FALSE
   max_multigrid_levels = MAX_MULTIGRID_LEVELS
}

Main {
// log file parameters
   log_file_name = "logfile"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d_multigrid"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 16

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridCartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridAlg {
}

GriddingAlgorithm {
   max_levels = 2                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 2, 2              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
    // level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1, 3*N/4 - 2)]
     level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )] // L-shaped refinement
    // level_0 = [( N/4 , N/8 ),( 3*N/4 - 1 , 3*N/4 - 1 )] 
    // level_0 = [(N/4 + 5 , N/4 + 5),( N/4 + 10, N/4 + 10)] 
    // level_0 = [(1,1), (30,30)] 
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*","IBAMR::*::*","*::*::*"
}

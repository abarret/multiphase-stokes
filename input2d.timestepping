un {
   function_0 = "0.0"
   function_1 = "0.0"
}

us {
   function_0 = "0.0"
   function_1 = "0.0"
} // so that average of un + us is 0

p {
   function = "0.0"
} // pressure has mean 0

f_un {
   function_0 = "-0.5*(1+8*PI*PI)*cos(2*PI*X_0)*cos(2*PI*X_1)-PI*PI*cos(2*PI*X_1)*cos(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_0)+PI*PI*cos(2*PI*X_0)*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_1)+1/32*sin(4*PI*X_0)*(-32*PI*PI+sin(2*PI*X_0)*sin(2*PI*X_1))*sin(4*PI*X_1)"
   function_1 = "-0.5*(1+8*PI*PI)*cos(2*PI*X_0)*cos(2*PI*X_1)+PI*PI*cos(2*PI*X_1)*cos(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_0)-PI*PI*cos(2*PI*X_0)*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_1)+1/32*sin(4*PI*X_0)*(-32*PI*PI+sin(2*PI*X_0)*sin(2*PI*X_1))*sin(4*PI*X_1)"
}

f_us {
   function_0 = "0.5*(1+8*PI*PI)*cos(2*PI*X_0)*cos(2*PI*X_1)-PI*PI*cos(2*PI*X_1)*cos(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_0)+PI*PI*cos(2*PI*X_0)*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_1)-1/32*sin(4*PI*X_0)*(32*PI*PI+sin(2*PI*X_0)*sin(2*PI*X_1))*sin(4*PI*X_1)"
   function_1 = "0.5*(1+8*PI*PI)*cos(2*PI*X_0)*cos(2*PI*X_1)+PI*PI*cos(2*PI*X_1)*cos(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_0)-PI*PI*cos(2*PI*X_0)*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_1)-1/32*sin(4*PI*X_0)*(32*PI*PI+sin(2*PI*X_0)*sin(2*PI*X_1))*sin(4*PI*X_1)"
}

f_p {
   function = "0.5*PI*sin(4*PI*(X_0 + X_1))"
}

thn {
   function = "0.25*sin(2*PI*X_0)*sin(2*PI*X_1) + 0.5"
}

RHO = 1.0
MAX_MULTIGRID_LEVELS = 5
START_TIME = 0.0
END_TIME = 1.0
NUM_CYCLES = 1
DT_MAX = 0.005
ENABLE_LOGGING = TRUE
W = 0.75

VIZ_DUMP_TIME_INTERVAL = 0.01

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d_timestepping"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 32

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

MultigridCartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1  
}

INSVCTwoFluidStaggeredHierarchyIntegrator {
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   num_cycles                    = NUM_CYCLES
   dt_max                        = DT_MAX
   enable_logging                = ENABLE_LOGGING
   w = W
   max_multigrid_levels = MAX_MULTIGRID_LEVELS

   solver_db {

   }

   precond_db {
      cycle_type = "V_CYCLE"
      num_pre_sweeps = 5
      num_post_sweeps = 5
      enable_logging = TRUE
   }
}

MultigridAlg {
}

GriddingAlgorithm {
   max_levels = 2                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
    // level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1, 3*N/4 - 2)]
    // level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )] // L-shaped refinement
     level_0 = [( N/4 , N/8 ),( 3*N/4 - 1 , 3*N/4 - 1 )] 
    // level_0 = [(N/4 + 5 , N/4 + 5),( N/4 + 10, N/4 + 10)] 
    // level_0 = [(1,1), (30,30)] 
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}
